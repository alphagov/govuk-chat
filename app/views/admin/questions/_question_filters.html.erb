<%
  user = filter.user
  conversation = filter.conversation
  signon_user = filter.signon_user
%>

<%= form_with(url: admin_questions_path, method: :get) do %>
  <% if params[:user_id].present? %>
    <p class="govuk-body">
      Filtering by user:
      <% if user.present? %>
        <%= link_to user.email, admin_early_access_user_path(user), class: "govuk-link" %>
      <% else %>
        <%= params[:user_id] %> (Deleted user)
      <% end %>
    </p>
    <%= hidden_field_tag(:user_id, params[:user_id]) %>
  <% elsif signon_user.present? %>
    <p class="govuk-body">
      Filtering by API user: <%= signon_user.name %>
    </p>
    <%= hidden_field_tag(:signon_user_id, params[:signon_user_id]) %>
  <% end %>

  <% if user.present? %>
    <%= render "govuk_publishing_components/components/select", {
      id: "conversation_id",
      name: "conversation_id",
      label: "Conversation",
      heading_size: "s",
      full_width: true,
      options: [{ text: "", value: "" }] +
        user.conversations.map.with_index(1) do |conversation, index|
          {
            text: index.ordinalize,
            value: conversation.id,
            selected: params[:conversation_id] == conversation.id,
          }
        end,
    } %>
  <% elsif conversation.present? %>
    <p class="govuk-body govuk-!-font-weight-bold govuk-!-margin-bottom-2">
      Filtering by conversation ID:
    </p>
    <p class="govuk-body">
      <%= conversation.id %>
    </p>
    <%= hidden_field_tag(:conversation_id, params[:conversation_id]) %>
  <% end %>

  <%= render "govuk_publishing_components/components/input", {
    label: {
      text: "Search",
    },
    name: "search",
    id: "search",
    value: params[:search],
    heading_size: "s",
    full_width: true,
  } %>

  <%= render "govuk_publishing_components/components/select", {
    id: "status",
    name: "status",
    label: "Status",
    heading_size: "s",
    options: ([""] + Rails.configuration.answer_statuses.keys).map do |status|
      status_config = Rails.configuration.answer_statuses[status]
      {
        text: status_config&.label_and_description || status_config&.label,
        value: status,
        selected: params[:status] == status,
      }
    end,
  } %>

  <%= render "govuk_publishing_components/components/fieldset", {
    legend_text: "Start date",
    heading_size: "s",
    id: "start_date",
  } do %>
    <%= render "govuk_publishing_components/components/date_input", {
      error_items: error_items(filter, :start_date_params),
      items: [
        {
          label: "Day",
          name: "start_date_params[day]",
          id: "start_date_params",
          width: 2,
          value: params.dig(:start_date_params, :day),
        },
        {
          label: "Month",
          name: "start_date_params[month]",
          width: 2,
          value: params.dig(:start_date_params, :month),
        },
        {
          label: "Year",
          name: "start_date_params[year]",
          width: 4,
          value:  params.dig(:start_date_params, :year),
        },
      ],
    } %>
  <% end %>

  <%= render "govuk_publishing_components/components/fieldset", {
    legend_text: "End date",
    heading_size: "s",
    id: "end_date",
  } do %>
       <%= render "govuk_publishing_components/components/date_input", {
      error_items: error_items(filter, :end_date_params),
      items: [
        {
          label: "Day",
          name: "end_date_params[day]",
          id: "end_date_params",
          width: 2,
          value: params.dig(:end_date_params, :day),
        },
        {
          label: "Month",
          name: "end_date_params[month]",
          width: 2,
          value: params.dig(:end_date_params, :month),
        },
        {
          label: "Year",
          name: "end_date_params[year]",
          width: 4,
          value:  params.dig(:end_date_params, :year),
        },
      ],
    } %>
  <% end %>

  <%= render "govuk_publishing_components/components/select", {
    id: "answer_feedback_useful",
    name: "answer_feedback_useful",
    label: "Answer useful",
    heading_size: "s",
    full_width: true,
    options: [
      {
        text: "",
        value: "",
      },
      {
        text: "Useful",
        value: "true",
        selected: params[:answer_feedback_useful] == "true",
      },
      {
        text: "Not useful",
        value: "false",
        selected: params[:answer_feedback_useful] == "false",
      },
    ],
  } %>

  <%= render "govuk_publishing_components/components/select", {
    id: "question_routing_label",
    name: "question_routing_label",
    label: "Question routing label",
    heading_size: "s",
    full_width: true,
    options: [{text: "", value: ""}] + Rails.configuration.question_routing_labels.keys.map do |label|
      {
        text: Rails.configuration.question_routing_labels[label][:label],
        value: label,
        selected: params[:question_routing_label] == label,
      }
    end,
  } %>

  <%= render "govuk_publishing_components/components/button", {
    text: "Filter",
    margin_bottom: true,
  } %>

  <p class="govuk-body">
    <%= link_to "Clear all filters",
                admin_questions_path,
                class: "govuk-link govuk-link--no-visited-state" %>
  </p>
<% end %>
